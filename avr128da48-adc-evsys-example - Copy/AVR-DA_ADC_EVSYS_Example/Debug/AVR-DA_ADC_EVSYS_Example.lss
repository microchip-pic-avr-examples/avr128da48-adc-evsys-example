
AVR-DA_ADC_EVSYS_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804000  00804000  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aed  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d8d  00000000  00000000  00003d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000364  00000000  00000000  00006b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00006e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000276f  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000964b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000096ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_24>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  68:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  6c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  70:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  7c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  80:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  84:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  8c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  90:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  94:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  98:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  9c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  ac:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  bc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  cc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  dc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_clear_bss>:
  f8:	20 e4       	ldi	r18, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a2 30       	cpi	r26, 0x02	; 2
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
 10c:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <__vector_24>:
    /* Set ADC as Event User on Channel 3 */
    EVSYS.USERADC0START = EVSYS_USER_CHANNEL3_gc;
}

ISR(ADC0_RESRDY_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	0b b6       	in	r0, 0x3b	; 59
 120:	0f 92       	push	r0
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
    /* Toggle LED (for visualization) */
    PORTC.OUTTGL |= PIN6_bm;
 12a:	e0 e4       	ldi	r30, 0x40	; 64
 12c:	f4 e0       	ldi	r31, 0x04	; 4
 12e:	87 81       	ldd	r24, Z+7	; 0x07
 130:	80 64       	ori	r24, 0x40	; 64
 132:	87 83       	std	Z+7, r24	; 0x07
    /* Store the ADC Conversion Result and Clear Interrupt Flag */
    adc_value = ADC0.RES;
 134:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 138:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
 13c:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 140:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <main>:

volatile uint16_t adc_value;

static void VREF_init(void)
{
    VREF.ADC0REF = VREF_REFSEL_2V048_gc     /* Select 2.048V Reference for ADC */
 15a:	81 e8       	ldi	r24, 0x81	; 129
 15c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
}

static void ADC0_init(void)
{
    /* Select CLK_PER prescaled with 2 */
    ADC0.CTRLC = ADC_PRESC_DIV2_gc;
 160:	e0 e0       	ldi	r30, 0x00	; 0
 162:	f6 e0       	ldi	r31, 0x06	; 6
 164:	12 82       	std	Z+2, r1	; 0x02
    /* MUX selection for Positive ADC input */
    ADC0.MUXPOS = ADC_MUXPOS_AIN0_gc;
 166:	10 86       	std	Z+8, r1	; 0x08
    /* Enable Event System */
    ADC0.EVCTRL = ADC_STARTEI_bm;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	83 87       	std	Z+11, r24	; 0x0b
    /* Enable Result Ready Interrupt */
    ADC0.INTCTRL = ADC_RESRDY_bm;
 16c:	84 87       	std	Z+12, r24	; 0x0c
    ADC0.CTRLA = ADC_ENABLE_bm              /* Enable ADC */
 16e:	80 83       	st	Z, r24
}

static void PORT_init(void)
{
    /* PC7 set as input (button) */
    PORTC.DIRCLR |= PIN7_bm;
 170:	e0 e4       	ldi	r30, 0x40	; 64
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	80 68       	ori	r24, 0x80	; 128
 178:	82 83       	std	Z+2, r24	; 0x02
    /* Use internal pull-up resistor */
    PORTC.PIN7CTRL |= PORT_PULLUPEN_bm;	
 17a:	87 89       	ldd	r24, Z+23	; 0x17
 17c:	88 60       	ori	r24, 0x08	; 8
 17e:	87 8b       	std	Z+23, r24	; 0x17
    /* PC6 set as output (LED for visualization) */
    PORTC.DIRSET |= PIN6_bm;
 180:	81 81       	ldd	r24, Z+1	; 0x01
 182:	80 64       	ori	r24, 0x40	; 64
 184:	81 83       	std	Z+1, r24	; 0x01
}

static void EVSYS_init(void)
{
    /* Set PC7 (button) as Event Generator on Channel 3 */
    EVSYS.CHANNEL3 = EVSYS_CHANNEL3_PORTC_PIN7_gc;
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	f2 e0       	ldi	r31, 0x02	; 2
 18a:	87 e4       	ldi	r24, 0x47	; 71
 18c:	83 8b       	std	Z+19, r24	; 0x13
    /* Set ADC as Event User on Channel 3 */
    EVSYS.USERADC0START = EVSYS_USER_CHANNEL3_gc;
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	84 a7       	std	Z+44, r24	; 0x2c
    ADC0_init();
    PORT_init();
    EVSYS_init();
	
    /* Enable Global Interrupts */
    sei();
 192:	78 94       	sei
 194:	ff cf       	rjmp	.-2      	; 0x194 <main+0x3a>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
